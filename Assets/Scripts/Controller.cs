//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controller: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controller()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controller"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""88d34731-17cd-416c-80bc-a7e5f82c7ba1"",
            ""actions"": [
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""0addda46-541e-42ce-a772-cbdbc1fafe4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ac412382-6853-46e2-b6ba-0521e81810c0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spin"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b6929df1-b0f1-41f7-bf2d-d065ae1b2db6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Element (Left)"",
                    ""type"": ""Button"",
                    ""id"": ""27af415b-0573-4210-b214-893a6ad6ecac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Element (Right)"",
                    ""type"": ""Button"",
                    ""id"": ""f24e9ee4-f45f-4068-94e3-728cf7194c75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu Nav"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a4668779-c897-4b25-88fb-27b426f95374"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c4867b8c-3386-4f7d-8e75-788b91f0ddd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Ice"",
                    ""type"": ""Button"",
                    ""id"": ""5dfd1408-ec43-475f-a8fd-256465f8cdf0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select LIghtning/Mercury"",
                    ""type"": ""Button"",
                    ""id"": ""789e6d1f-3420-4369-b190-611fc761b0c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combinations"",
                    ""type"": ""Button"",
                    ""id"": ""bd56afdc-2202-4761-a2ee-a83c10fb8390"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""a552494b-da14-40a8-a5bf-921b5caebff6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""05bc2653-3769-43c0-a56c-e139fc4a76c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""5b9b20da-1e0e-4254-ac1a-e1073f093cef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""85e0bbed-9d6e-4f4c-8d0d-a8cc77f20340"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c146936c-4efe-432f-9360-60a65a47a51f"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d431c31-6ee6-4287-929f-c13b25943252"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a21ba362-68a3-43a3-8bcc-cd58ac15f7ca"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbefad40-b407-4f1c-8383-8acc45564b2d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84186af4-cca1-484e-a59d-05ec8acf6f50"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""247421c8-25d9-416f-9812-accdba7f0a6b"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Element (Left)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d46fc9e-e173-4b8f-ab67-7b0617da31f2"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Element (Right)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0f05300-6e9c-47f0-bf9c-ea4f76674f6b"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu Nav"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e902d79-5864-47da-8508-d57bfeb8d319"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""020bfce4-6ba5-435e-985a-520a2627a2c4"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select Ice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d802755-c6bf-48ab-9903-ecacd43a9f20"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select LIghtning/Mercury"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1fde580a-b63f-4373-aa6a-b7c3b81e2c12"",
                    ""path"": ""<DualShockGamepad>/touchpadButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combinations"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""429bda8b-1635-4b5e-8dc0-569fec7ea7ce"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combinations"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1a1d5fe-78e8-4f51-81e8-9efc50d6e033"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e0e7dfe-7605-47db-82a1-7a8ad7529905"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e94dfe1d-4750-4168-8341-2af1c1814b41"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcaf8862-9d25-4a13-a602-5b26c73aa177"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Shoot = m_Gameplay.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Spin = m_Gameplay.FindAction("Spin", throwIfNotFound: true);
        m_Gameplay_ChangeElementLeft = m_Gameplay.FindAction("Change Element (Left)", throwIfNotFound: true);
        m_Gameplay_ChangeElementRight = m_Gameplay.FindAction("Change Element (Right)", throwIfNotFound: true);
        m_Gameplay_MenuNav = m_Gameplay.FindAction("Menu Nav", throwIfNotFound: true);
        m_Gameplay_SelectFire = m_Gameplay.FindAction("Select Fire", throwIfNotFound: true);
        m_Gameplay_SelectIce = m_Gameplay.FindAction("Select Ice", throwIfNotFound: true);
        m_Gameplay_SelectLIghtningMercury = m_Gameplay.FindAction("Select LIghtning/Mercury", throwIfNotFound: true);
        m_Gameplay_Combinations = m_Gameplay.FindAction("Combinations", throwIfNotFound: true);
        m_Gameplay_Pause = m_Gameplay.FindAction("Pause", throwIfNotFound: true);
        m_Gameplay_Action = m_Gameplay.FindAction("Action", throwIfNotFound: true);
        m_Gameplay_Heal = m_Gameplay.FindAction("Heal", throwIfNotFound: true);
        m_Gameplay_Back = m_Gameplay.FindAction("Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Shoot;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Spin;
    private readonly InputAction m_Gameplay_ChangeElementLeft;
    private readonly InputAction m_Gameplay_ChangeElementRight;
    private readonly InputAction m_Gameplay_MenuNav;
    private readonly InputAction m_Gameplay_SelectFire;
    private readonly InputAction m_Gameplay_SelectIce;
    private readonly InputAction m_Gameplay_SelectLIghtningMercury;
    private readonly InputAction m_Gameplay_Combinations;
    private readonly InputAction m_Gameplay_Pause;
    private readonly InputAction m_Gameplay_Action;
    private readonly InputAction m_Gameplay_Heal;
    private readonly InputAction m_Gameplay_Back;
    public struct GameplayActions
    {
        private @Controller m_Wrapper;
        public GameplayActions(@Controller wrapper) { m_Wrapper = wrapper; }
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Shoot;
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Spin => m_Wrapper.m_Gameplay_Spin;
        public InputAction @ChangeElementLeft => m_Wrapper.m_Gameplay_ChangeElementLeft;
        public InputAction @ChangeElementRight => m_Wrapper.m_Gameplay_ChangeElementRight;
        public InputAction @MenuNav => m_Wrapper.m_Gameplay_MenuNav;
        public InputAction @SelectFire => m_Wrapper.m_Gameplay_SelectFire;
        public InputAction @SelectIce => m_Wrapper.m_Gameplay_SelectIce;
        public InputAction @SelectLIghtningMercury => m_Wrapper.m_Gameplay_SelectLIghtningMercury;
        public InputAction @Combinations => m_Wrapper.m_Gameplay_Combinations;
        public InputAction @Pause => m_Wrapper.m_Gameplay_Pause;
        public InputAction @Action => m_Wrapper.m_Gameplay_Action;
        public InputAction @Heal => m_Wrapper.m_Gameplay_Heal;
        public InputAction @Back => m_Wrapper.m_Gameplay_Back;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Spin.started += instance.OnSpin;
            @Spin.performed += instance.OnSpin;
            @Spin.canceled += instance.OnSpin;
            @ChangeElementLeft.started += instance.OnChangeElementLeft;
            @ChangeElementLeft.performed += instance.OnChangeElementLeft;
            @ChangeElementLeft.canceled += instance.OnChangeElementLeft;
            @ChangeElementRight.started += instance.OnChangeElementRight;
            @ChangeElementRight.performed += instance.OnChangeElementRight;
            @ChangeElementRight.canceled += instance.OnChangeElementRight;
            @MenuNav.started += instance.OnMenuNav;
            @MenuNav.performed += instance.OnMenuNav;
            @MenuNav.canceled += instance.OnMenuNav;
            @SelectFire.started += instance.OnSelectFire;
            @SelectFire.performed += instance.OnSelectFire;
            @SelectFire.canceled += instance.OnSelectFire;
            @SelectIce.started += instance.OnSelectIce;
            @SelectIce.performed += instance.OnSelectIce;
            @SelectIce.canceled += instance.OnSelectIce;
            @SelectLIghtningMercury.started += instance.OnSelectLIghtningMercury;
            @SelectLIghtningMercury.performed += instance.OnSelectLIghtningMercury;
            @SelectLIghtningMercury.canceled += instance.OnSelectLIghtningMercury;
            @Combinations.started += instance.OnCombinations;
            @Combinations.performed += instance.OnCombinations;
            @Combinations.canceled += instance.OnCombinations;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @Heal.started += instance.OnHeal;
            @Heal.performed += instance.OnHeal;
            @Heal.canceled += instance.OnHeal;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Spin.started -= instance.OnSpin;
            @Spin.performed -= instance.OnSpin;
            @Spin.canceled -= instance.OnSpin;
            @ChangeElementLeft.started -= instance.OnChangeElementLeft;
            @ChangeElementLeft.performed -= instance.OnChangeElementLeft;
            @ChangeElementLeft.canceled -= instance.OnChangeElementLeft;
            @ChangeElementRight.started -= instance.OnChangeElementRight;
            @ChangeElementRight.performed -= instance.OnChangeElementRight;
            @ChangeElementRight.canceled -= instance.OnChangeElementRight;
            @MenuNav.started -= instance.OnMenuNav;
            @MenuNav.performed -= instance.OnMenuNav;
            @MenuNav.canceled -= instance.OnMenuNav;
            @SelectFire.started -= instance.OnSelectFire;
            @SelectFire.performed -= instance.OnSelectFire;
            @SelectFire.canceled -= instance.OnSelectFire;
            @SelectIce.started -= instance.OnSelectIce;
            @SelectIce.performed -= instance.OnSelectIce;
            @SelectIce.canceled -= instance.OnSelectIce;
            @SelectLIghtningMercury.started -= instance.OnSelectLIghtningMercury;
            @SelectLIghtningMercury.performed -= instance.OnSelectLIghtningMercury;
            @SelectLIghtningMercury.canceled -= instance.OnSelectLIghtningMercury;
            @Combinations.started -= instance.OnCombinations;
            @Combinations.performed -= instance.OnCombinations;
            @Combinations.canceled -= instance.OnCombinations;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @Heal.started -= instance.OnHeal;
            @Heal.performed -= instance.OnHeal;
            @Heal.canceled -= instance.OnHeal;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnShoot(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSpin(InputAction.CallbackContext context);
        void OnChangeElementLeft(InputAction.CallbackContext context);
        void OnChangeElementRight(InputAction.CallbackContext context);
        void OnMenuNav(InputAction.CallbackContext context);
        void OnSelectFire(InputAction.CallbackContext context);
        void OnSelectIce(InputAction.CallbackContext context);
        void OnSelectLIghtningMercury(InputAction.CallbackContext context);
        void OnCombinations(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnHeal(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
}
